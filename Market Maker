from backtesting import evaluateIntr
from strategy import Strategy
from order import Order
import numpy as np

class BuynHold(Strategy):

    def __init__(self):
        self.bought = {}
        self.orders = []

    def push(self, event):
        # If didnt buy yet, do it
        if event.instrument not in self.bought:
            self.bought[event.instrument] = False

        if not self.bought[event.instrument]:
            self.bought[event.instrument] = True
            # Send one buy order once
            order = Order(event.instrument, 1, event.price[3] - 0.01)
            self.orders.append(order)
            return [order]
        else:
            for order in self.orders:
                self.cancel(self.id, order.id)

        # If you need partial result in case of feedback training
        # result = self.partialResult()

        return []


class MAVG(Strategy):

    def __init__(self):
        self.signal = 0
        self.prices = []
        self.sizeq = 10
        self.sizes = 100
        self.std = 0
        self.ref = 0

    def push(self, event):
        price = event.price[3]
        self.prices.append(price)
        orders = []

        if len(self.prices) >= self.sizeq:
            maq = sum(self.prices[-self.sizeq:])/self.sizeq
        if len(self.prices) == self.sizes:
            mas = sum(self.prices)/self.sizes

            if maq > mas and self.signal != 1:
                if self.signal == -1:
                    orders.append(Order(event.instrument, 1, 0))
                orders.append(Order(event.instrument, 1, 0))
                self.signal = 1
            elif maq < mas and self.signal != -1:
                if self.signal == 1:
                    orders.append(Order(event.instrument, -1, 0))
                orders.append(Order(event.instrument, -1, 0))
                self.signal = -1

            del self.prices[0]

        return orders


print(evaluateIntr(BuynHold(), {'USDBRL': 'USDBRL.csv', 'PETR3': 'PETR3.csv'}))
print(evaluateIntr(MAVG(), {'USDBRL': 'USDBRL.csv'}))
  
Projeto Market_Maker(Strategy):

  def __init__(self):
      pass
  
    PBR = PETR3 / (USDBRL * 2)
    PBR_ask = (PETR3 + spread) / (USDBRL * 2)
    PBR_bid = (PETR3 - spread) / (USDBRL * 2)
    
  def push(self, event):  
    
    self.pricePETR3 = price_PETR3
    self.priceUSDBRL = price_USDBRL
    self.timestampPETR3 = time_PETR3
    self.timestampUSDBRL = time_USDBRL
    self.lastpricePETR3 = lastprice_PETR3
    self.lastpricePETR3 = lastprice_USDBRL
    
    if event.instrument == 'PETR3':
      price_PETR3.append(event.price[3])
      time_PETR3.append(event.timestamp)

      if event.instrument == 'USDBRL':
        price_USDBRL.append(event.price[3])
        time_USDBRL.append(event.timestamp)

      if time_PETR3 != [] and time_USDBRL != []:
        if time_PETR3[-1] == time_USDBRL[-1]:
        self.spreads.append((price_PETR3[-1])/(price_USDBRL[-1]))

        if lastprice_PETR3 != price_PETR3[-1] or lastprice_USDBRL != price_USDBRL[-1]:
          lastprice_PETR3 = price_PETR3[-1] and lastprice_USDBRL = price_USDBRL[-1]
          
                        
          if self.id_ask != 0:
            self.cancel(self.id, self.id_ask)

            if self.id_bid != 0:
              self.cancel(self.id, self.id_bid)

              #Compra
              ordem_de_compra = Order('PBR', 100, self.spreads[-1] * 0.999)
              self.id_de_compra = ordem_de_compra.id
              print PBR_ask

              #Venda
              ordem_de_venda = Order('PBR', -100, self.spreads[-1] * 1.001)
              self.id_de_venda = ordem_de_venda.id
              print PBR_bid
              
              #Spread
              if ordem_de_compra > 0:
              spread = PBR - PBR_ask 
              elif:
                spread = PBR_bid - PBR
              return spread
             
              self.submit(self.id[ordem_de_venda])
              self.submit(self.id[ordem_de_compra])
              return [ordem_de_compra, ordem_de_venda]


    def fill(self, id, instrument, price, quantity, status):
        super().fill(id, instrument, price, quantity, status)
         
        if quantity != 0:
            print(f'{quantity}: {price}'@ {instrument})
        
        if instrument == 'PBR' and quantity != 0:
            self.submit(self.id, [Order('PETR3', -quantity, 0), Order['USDBRL', quantity* price, 0], Order['PETR3', quantity, 0]])
               
print(evaluateIntr(marketMaker(), {'USDBRL': 'USDBRL.csv', 'PETR3': 'PETR3.csv', 'PBR' : 'PBR.csv'}))

#print(evaluateIntr(BuynHold(), {'USDBRL': 'USDBRL.csv', 'PETR3': 'PETR3.csv'}))
#print(evaluateIntr(MAVG(), {'USDBRL': 'USDBRL.csv', 'PETR3': 'PETR3.csv'}))
